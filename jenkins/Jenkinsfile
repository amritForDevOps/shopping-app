pipeline{
    agent any
    enviroment{
        AWS_REGION= "us-east-1"
        AWS_ACCOUNT_ID= "124355676261"
        EKS_CLUSTER_NAME= "shopping-eks"
        ECR_BACKEND = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/shopping-backend"
        ECR_FRONTEND= "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/shopping-frontend"
        IMAGE_TAG = "build-${env.BUILD_NUMBER}"
    }
    stages{
        stage('Checkout Code'){
            steps{
                checkout scm
            }
        }
        stage('Backend: Install & Test'){
            steps{
                dir('backend'){
                    sh 'npm ci'
                    sh 'npm test || true' //adapt tests later
                }
            }
        }
        stage('Build & Push Image'){
            steps{
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY']]) {
            sh '''
                export AWS_REGION=${AWS_REGION}
                export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

                aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com

                # Build backend
                docker build -t ${ECR_BACKEND}:${IMAGE_TAG} ./backend
                docker push ${ECR_BACKEND}:${IMAGE_TAG}

                # Build frontend
                docker build -t ${ECR_FRONTEND}:${IMAGE_TAG} ./frontend
                docker push ${ECR_FRONTEND}:${IMAGE_TAG}
            '''
            }
        }
        }
        stage('Deploy to EKS'){
            steps{
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY']]) {
          sh '''
            export AWS_REGION=${AWS_REGION}
            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

            aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER_NAME}

            # Update deployments using kubectl set image for safer updates
            kubectl set image deployment/shopping-backend backend=${ECR_BACKEND}:${IMAGE_TAG} --namespace default || true
            kubectl set image deployment/shopping-frontend frontend=${ECR_FRONTEND}:${IMAGE_TAG} --namespace default || true

            # Apply manifests (in case new resources added)
            kubectl apply -f k8s/base/
            kubectl apply -f k8s/ingress/ingress.yaml
          '''                
            }
        }
        }
        post{
            always{
                echo "Pipeline finished: ${currentBuild.fullDisplayName}"
            }
        }
    }
}